/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytatech.ayoos.client.activiti_rest_api.api;

import com.bytatech.ayoos.client.activiti_rest_api.model.CommentResponse;
import com.bytatech.ayoos.client.activiti_rest_api.model.DataResponse;
import com.bytatech.ayoos.client.activiti_rest_api.model.HistoricActivityInstanceQueryRequest;
import com.bytatech.ayoos.client.activiti_rest_api.model.HistoricDetailQueryRequest;
import com.bytatech.ayoos.client.activiti_rest_api.model.HistoricIdentityLinkResponse;
import com.bytatech.ayoos.client.activiti_rest_api.model.HistoricProcessInstanceQueryRequest;
import com.bytatech.ayoos.client.activiti_rest_api.model.HistoricProcessInstanceResponse;
import com.bytatech.ayoos.client.activiti_rest_api.model.HistoricTaskInstanceQueryRequest;
import com.bytatech.ayoos.client.activiti_rest_api.model.HistoricTaskInstanceResponse;
import com.bytatech.ayoos.client.activiti_rest_api.model.HistoricVariableInstanceQueryRequest;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-04-16T17:01:52.038+05:30[Asia/Kolkata]")

@Api(value = "History", description = "the History API")
public interface HistoryApi {

    @ApiOperation(value = "Create a new comment on a historic process instance", nickname = "createComment", notes = "Parameter saveProcessInstanceId is optional, if true save process instance id of task with comment.", response = CommentResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CommentResponse.class),
        @ApiResponse(code = 201, message = "Indicates the comment was created and the result is returned."),
        @ApiResponse(code = 400, message = "Indicates the comment is missing from the request."),
        @ApiResponse(code = 404, message = "Indicates that the historic process instance could not be found.") })
    @RequestMapping(value = "/history/historic-process-instances/{processInstanceId}/comments",
        produces = "application/json", 
        method = RequestMethod.POST)
    ResponseEntity<CommentResponse> createComment(@ApiParam(value = "processInstanceId",required=true) @PathVariable("processInstanceId") String processInstanceId,@ApiParam(value = ""  )  @Valid @RequestBody CommentResponse commentResponse);


    @ApiOperation(value = "Delete a comment on a historic process instance", nickname = "deleteComment", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Indicates the historic process instance and comment were found and the comment is deleted. Response body is left empty intentionally."),
        @ApiResponse(code = 404, message = "Indicates the requested historic process instance was not found or the historic process instance doesn�t have a comment with the given ID.") })
    @RequestMapping(value = "/history/historic-process-instances/{processInstanceId}/comments/{commentId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteComment(@ApiParam(value = "The id of the historic process instance to delete the comment for.",required=true) @PathVariable("processInstanceId") String processInstanceId,@ApiParam(value = "The id of the comment.",required=true) @PathVariable("commentId") String commentId);


    @ApiOperation(value = " Delete a historic process instance", nickname = "deleteHitoricProcessInstance", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Indicates that the historic process instance was deleted."),
        @ApiResponse(code = 404, message = "Indicates that the historic process instance could not be found.") })
    @RequestMapping(value = "/history/historic-process-instances/{processInstanceId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteHitoricProcessInstance(@ApiParam(value = "",required=true) @PathVariable("processInstanceId") String processInstanceId);


    @ApiOperation(value = "Delete a historic task instance", nickname = "deleteTaskInstance", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Indicates that the historic task instance was deleted."),
        @ApiResponse(code = 404, message = "Indicates that the historic task instance could not be found.") })
    @RequestMapping(value = "/history/historic-task-instances/{taskId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTaskInstance(@ApiParam(value = "",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Get a comment on a historic process instance", nickname = "getComment", notes = "", response = CommentResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the historic process instance and comment were found and the comment is returned.", response = CommentResponse.class),
        @ApiResponse(code = 404, message = "Indicates the requested historic process instance was not found or the historic process instance doesn�t have a comment with the given ID.") })
    @RequestMapping(value = "/history/historic-process-instances/{processInstanceId}/comments/{commentId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<CommentResponse> getComment(@ApiParam(value = "The id of the historic process instance to get the comment for.",required=true) @PathVariable("processInstanceId") String processInstanceId,@ApiParam(value = "The id of the comment.",required=true) @PathVariable("commentId") String commentId);


    @ApiOperation(value = "Get all comments on a historic process instance", nickname = "getComments", notes = "", response = CommentResponse.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the process instance was found and the comments are returned.", response = CommentResponse.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Indicates that the historic process instance could not be found.") })
    @RequestMapping(value = "/history/historic-process-instances/{processInstanceId}/comments",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<CommentResponse>> getComments(@ApiParam(value = "The id of the process instance to get the comments for.",required=true) @PathVariable("processInstanceId") String processInstanceId);


    @ApiOperation(value = "Get historic activity instances", nickname = "getHistoricActivityInstances", notes = "", response = DataResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates that historic activity instances could be queried.", response = DataResponse.class),
        @ApiResponse(code = 400, message = "Indicates an parameter was passed in the wrong format. The status-message contains additional information.") })
    @RequestMapping(value = "/history/historic-activity-instances",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<DataResponse> getHistoricActivityInstances(@ApiParam(value = "An id of the activity instance.") @Valid @RequestParam(value = "activityId", required = false) String activityId,@ApiParam(value = "An id of the historic activity instance.") @Valid @RequestParam(value = "activityInstanceId", required = false) String activityInstanceId,@ApiParam(value = "The name of the historic activity instance.") @Valid @RequestParam(value = "activityName", required = false) String activityName,@ApiParam(value = "The element type of the historic activity instance.") @Valid @RequestParam(value = "activityType", required = false) String activityType,@ApiParam(value = "The execution id of the historic activity instance.") @Valid @RequestParam(value = "executionId", required = false) String executionId,@ApiParam(value = "Indication if the historic activity instance is finished.") @Valid @RequestParam(value = "finished", required = false) Boolean finished,@ApiParam(value = "The assignee of the historic activity instance.") @Valid @RequestParam(value = "taskAssignee", required = false) String taskAssignee,@ApiParam(value = "The process instance id of the historic activity instance.") @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,@ApiParam(value = "The process definition id of the historic activity instance.") @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,@ApiParam(value = "Only return instances with the given tenantId.") @Valid @RequestParam(value = "tenantId", required = false) String tenantId,@ApiParam(value = "Only return instances with a tenantId like the given value.") @Valid @RequestParam(value = "tenantIdLike", required = false) String tenantIdLike,@ApiParam(value = "If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored.") @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId);


    @ApiOperation(value = "Get historic detail", nickname = "getHistoricDetailInfo", notes = "", response = DataResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates that historic detail could be queried.", response = DataResponse.class),
        @ApiResponse(code = 400, message = "Indicates an parameter was passed in the wrong format. The status-message contains additional information.") })
    @RequestMapping(value = "/history/historic-detail",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<DataResponse> getHistoricDetailInfo(@ApiParam(value = "The id of the historic detail.") @Valid @RequestParam(value = "id", required = false) String id,@ApiParam(value = "The process instance id of the historic detail.") @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,@ApiParam(value = "The execution id of the historic detail.") @Valid @RequestParam(value = "executionId", required = false) String executionId,@ApiParam(value = "The activity instance id of the historic detail.") @Valid @RequestParam(value = "activityInstanceId", required = false) String activityInstanceId,@ApiParam(value = "The task id of the historic detail.") @Valid @RequestParam(value = "taskId", required = false) String taskId,@ApiParam(value = "Indication to only return form properties in the result.") @Valid @RequestParam(value = "selectOnlyFormProperties", required = false) Boolean selectOnlyFormProperties,@ApiParam(value = "Indication to only return variable updates in the result.") @Valid @RequestParam(value = "selectOnlyVariableUpdates", required = false) Boolean selectOnlyVariableUpdates);


    @ApiOperation(value = "Get the binary data for a historic detail variable", nickname = "getHistoricDetailVariableData", notes = "The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the historic detail instance was found and the requested variable data is returned.", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Indicates the requested historic detail instance was not found or the historic detail instance doesn�t have a variable with the given name or the variable doesn�t have a binary stream available. Status message provides additional information.") })
    @RequestMapping(value = "/history/historic-detail/{detailId}/data",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<byte[]>> getHistoricDetailVariableData(@ApiParam(value = "",required=true) @PathVariable("detailId") String detailId);


    @ApiOperation(value = "Get the binary data for a historic task instance variable", nickname = "getHistoricInstanceVariableData", notes = "The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the variable instance was found and the requested variable data is returned.", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Indicates the requested variable instance was not found or the variable instance doesn�t have a variable with the given name or the variable doesn�t have a binary stream available. Status message provides additional information.") })
    @RequestMapping(value = "/history/historic-variable-instances/{varInstanceId}/data",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<byte[]>> getHistoricInstanceVariableData(@ApiParam(value = "",required=true) @PathVariable("varInstanceId") String varInstanceId);


    @ApiOperation(value = "Get a historic process instance", nickname = "getHistoricProcessInstance", notes = "", response = HistoricProcessInstanceResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates that the historic process instances could be found.", response = HistoricProcessInstanceResponse.class),
        @ApiResponse(code = 404, message = "Indicates that the historic process instances could not be found.") })
    @RequestMapping(value = "/history/historic-process-instances/{processInstanceId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<HistoricProcessInstanceResponse> getHistoricProcessInstance(@ApiParam(value = "",required=true) @PathVariable("processInstanceId") String processInstanceId);


    @ApiOperation(value = "Get the binary data for a historic process instance variable", nickname = "getHistoricProcessInstanceVariableData", notes = "The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the process instance was found and the requested variable data is returned.", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Indicates the requested process instance was not found or the process instance doesn�t have a variable with the given name or the variable doesn�t have a binary stream available. Status message provides additional information.") })
    @RequestMapping(value = "/history/historic-process-instances/{processInstanceId}/variables/{variableName}/data",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<byte[]>> getHistoricProcessInstanceVariableData(@ApiParam(value = "",required=true) @PathVariable("processInstanceId") String processInstanceId,@ApiParam(value = "",required=true) @PathVariable("variableName") String variableName);


    @ApiOperation(value = "Get the binary data for a historic task instance variable", nickname = "getHistoricTaskInstanceVariableData", notes = "The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the task instance was found and the requested variable data is returned.", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Indicates the requested task instance was not found or the process instance doesn�t have a variable with the given name or the variable doesn�t have a binary stream available. Status message provides additional information.") })
    @RequestMapping(value = "/history/historic-task-instances/{taskId}/variables/{variableName}/data",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<byte[]>> getHistoricTaskInstanceVariableData(@ApiParam(value = "",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "",required=true) @PathVariable("variableName") String variableName,@ApiParam(value = "") @Valid @RequestParam(value = "scope", required = false) String scope);


    @ApiOperation(value = "List of historic variable instances", nickname = "getHistoricVariableInstances", notes = "", response = DataResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates that historic variable instances could be queried.", response = DataResponse.class),
        @ApiResponse(code = 400, message = "Indicates an parameter was passed in the wrong format. The status-message contains additional information.") })
    @RequestMapping(value = "/history/historic-variable-instances",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<DataResponse> getHistoricVariableInstances(@ApiParam(value = "The process instance id of the historic variable instance.") @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,@ApiParam(value = "The task id of the historic variable instance.") @Valid @RequestParam(value = "taskId", required = false) String taskId,@ApiParam(value = "Indication to exclude the task variables from the result.") @Valid @RequestParam(value = "excludeTaskVariables", required = false) Boolean excludeTaskVariables,@ApiParam(value = "The variable name of the historic variable instance.") @Valid @RequestParam(value = "variableName", required = false) String variableName,@ApiParam(value = "The variable name using the like operator for the historic variable instance.") @Valid @RequestParam(value = "variableNameLike", required = false) String variableNameLike);


    @ApiOperation(value = "Get the identity links of a historic process instance", nickname = "getProcessIdentityLinks", notes = "", response = HistoricIdentityLinkResponse.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates request was successful and the identity links are returned", response = HistoricIdentityLinkResponse.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Indicates the process instance could not be found..") })
    @RequestMapping(value = "/history/historic-process-instances/{processInstanceId}/identitylinks",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<HistoricIdentityLinkResponse>> getProcessIdentityLinks(@ApiParam(value = "",required=true) @PathVariable("processInstanceId") String processInstanceId);


    @ApiOperation(value = "Get the identity links of a historic task instance", nickname = "getTaskIdentityLinks", notes = "", response = HistoricIdentityLinkResponse.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates request was successful and the identity links are returned", response = HistoricIdentityLinkResponse.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Indicates the task instance could not be found.") })
    @RequestMapping(value = "/history/historic-task-instances/{taskId}/identitylinks",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<HistoricIdentityLinkResponse>> getTaskIdentityLinks(@ApiParam(value = "",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Get a single historic task instance", nickname = "getTaskInstance", notes = "", response = HistoricTaskInstanceResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates that the historic task instances could be found.", response = HistoricTaskInstanceResponse.class),
        @ApiResponse(code = 404, message = "Indicates that the historic task instances could not be found.") })
    @RequestMapping(value = "/history/historic-task-instances/{taskId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<HistoricTaskInstanceResponse> getTaskInstance(@ApiParam(value = "",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "List of historic process instances", nickname = "listHistoricProcessInstances", notes = "", response = DataResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates that historic process instances could be queried.", response = DataResponse.class),
        @ApiResponse(code = 400, message = "Indicates an parameter was passed in the wrong format. The status-message contains additional information.") })
    @RequestMapping(value = "/history/historic-process-instances",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<DataResponse> listHistoricProcessInstances(@ApiParam(value = "An id of the historic process instance.") @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,@ApiParam(value = "The process definition key of the historic process instance.") @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,@ApiParam(value = "The process definition id of the historic process instance.") @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,@ApiParam(value = "The business key of the historic process instance.") @Valid @RequestParam(value = "businessKey", required = false) String businessKey,@ApiParam(value = "An involved user of the historic process instance.") @Valid @RequestParam(value = "involvedUser", required = false) String involvedUser,@ApiParam(value = "Indication if the historic process instance is finished.") @Valid @RequestParam(value = "finished", required = false) Boolean finished,@ApiParam(value = "An optional parent process id of the historic process instance.") @Valid @RequestParam(value = "superProcessInstanceId", required = false) String superProcessInstanceId,@ApiParam(value = "Return only historic process instances which aren�t sub processes.") @Valid @RequestParam(value = "excludeSubprocesses", required = false) Boolean excludeSubprocesses,@ApiParam(value = "Return only historic process instances that were finished after this date.") @Valid @RequestParam(value = "finishedAfter", required = false) String finishedAfter,@ApiParam(value = "Return only historic process instances that were finished before this date.") @Valid @RequestParam(value = "finishedBefore", required = false) String finishedBefore,@ApiParam(value = "Return only historic process instances that were started after this date.") @Valid @RequestParam(value = "startedAfter", required = false) String startedAfter,@ApiParam(value = "Return only historic process instances that were started before this date.") @Valid @RequestParam(value = "startedBefore", required = false) String startedBefore,@ApiParam(value = "Return only historic process instances that were started by this user.") @Valid @RequestParam(value = "startedBy", required = false) String startedBy,@ApiParam(value = "An indication if the historic process instance variables should be returned as well.") @Valid @RequestParam(value = "includeProcessVariables", required = false) Boolean includeProcessVariables,@ApiParam(value = "Only return instances with the given tenantId.") @Valid @RequestParam(value = "tenantId", required = false) String tenantId,@ApiParam(value = "Only return instances with a tenantId like the given value.") @Valid @RequestParam(value = "tenantIdLike", required = false) String tenantIdLike,@ApiParam(value = "If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. ") @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId);


    @ApiOperation(value = "Get historic task instances", nickname = "listHistoricTaskInstances", notes = "", response = DataResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates that historic task instances could be queried.", response = DataResponse.class),
        @ApiResponse(code = 404, message = "Indicates an parameter was passed in the wrong format. The status-message contains additional information.") })
    @RequestMapping(value = "/history/historic-task-instances",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<DataResponse> listHistoricTaskInstances(@ApiParam(value = "An id of the historic task instance.") @Valid @RequestParam(value = "taskId", required = false) String taskId,@ApiParam(value = "The process instance id of the historic task instance.") @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,@ApiParam(value = "The process definition key of the historic task instance.") @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,@ApiParam(value = "The process definition key of the historic task instance, which matches the given value.") @Valid @RequestParam(value = "processDefinitionKeyLike", required = false) String processDefinitionKeyLike,@ApiParam(value = "The process definition id of the historic task instance.") @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,@ApiParam(value = "The process definition name of the historic task instance.") @Valid @RequestParam(value = "processDefinitionName", required = false) String processDefinitionName,@ApiParam(value = "The process definition name of the historic task instance, which matches the given value.") @Valid @RequestParam(value = "processDefinitionNameLike", required = false) String processDefinitionNameLike,@ApiParam(value = "The process instance business key of the historic task instance.") @Valid @RequestParam(value = "processBusinessKey", required = false) String processBusinessKey,@ApiParam(value = "The process instance business key of the historic task instance that matches the given value.") @Valid @RequestParam(value = "processBusinessKeyLike", required = false) String processBusinessKeyLike,@ApiParam(value = "The execution id of the historic task instance.") @Valid @RequestParam(value = "executionId", required = false) String executionId,@ApiParam(value = "The task definition key for tasks part of a process") @Valid @RequestParam(value = "taskDefinitionKey", required = false) String taskDefinitionKey,@ApiParam(value = "The task name of the historic task instance.") @Valid @RequestParam(value = "taskName", required = false) String taskName,@ApiParam(value = "The task name with like operator for the historic task instance.") @Valid @RequestParam(value = "taskNameLike", required = false) String taskNameLike,@ApiParam(value = "The task description of the historic task instance.") @Valid @RequestParam(value = "taskDescription", required = false) String taskDescription,@ApiParam(value = "The task description with like operator for the historic task instance.") @Valid @RequestParam(value = "taskDescriptionLike", required = false) String taskDescriptionLike,@ApiParam(value = "Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml).") @Valid @RequestParam(value = "taskCategory", required = false) String taskCategory,@ApiParam(value = "The task delete reason of the historic task instance.") @Valid @RequestParam(value = "taskDeleteReason", required = false) String taskDeleteReason,@ApiParam(value = "The task delete reason with like operator for the historic task instance.") @Valid @RequestParam(value = "taskDeleteReasonLike", required = false) String taskDeleteReasonLike,@ApiParam(value = "The assignee of the historic task instance.") @Valid @RequestParam(value = "taskAssignee", required = false) String taskAssignee,@ApiParam(value = "The assignee with like operator for the historic task instance.") @Valid @RequestParam(value = "taskAssigneeLike", required = false) String taskAssigneeLike,@ApiParam(value = "The owner of the historic task instance.") @Valid @RequestParam(value = "taskOwner", required = false) String taskOwner,@ApiParam(value = "The owner with like operator for the historic task instance.") @Valid @RequestParam(value = "taskOwnerLike", required = false) String taskOwnerLike,@ApiParam(value = "An involved user of the historic task instance") @Valid @RequestParam(value = "taskInvolvedUser", required = false) String taskInvolvedUser,@ApiParam(value = "The priority of the historic task instance.") @Valid @RequestParam(value = "taskPriority", required = false) String taskPriority,@ApiParam(value = "Indication if the historic task instance is finished.") @Valid @RequestParam(value = "finished", required = false) Boolean finished,@ApiParam(value = "Indication if the process instance of the historic task instance is finished.") @Valid @RequestParam(value = "processFinished", required = false) Boolean processFinished,@ApiParam(value = "An optional parent task id of the historic task instance.") @Valid @RequestParam(value = "parentTaskId", required = false) String parentTaskId,@ApiParam(value = "Return only historic task instances that have a due date equal this date.") @Valid @RequestParam(value = "dueDate", required = false) String dueDate,@ApiParam(value = "Return only historic task instances that have a due date after this date.") @Valid @RequestParam(value = "dueDateAfter", required = false) String dueDateAfter,@ApiParam(value = "Return only historic task instances that have a due date before this date.") @Valid @RequestParam(value = "dueDateBefore", required = false) String dueDateBefore,@ApiParam(value = "Return only historic task instances that have no due-date. When false is provided as value, this parameter is ignored.") @Valid @RequestParam(value = "withoutDueDate", required = false) Boolean withoutDueDate,@ApiParam(value = "Return only historic task instances that have been completed on this date.") @Valid @RequestParam(value = "taskCompletedOn", required = false) String taskCompletedOn,@ApiParam(value = "Return only historic task instances that have been completed after this date.") @Valid @RequestParam(value = "taskCompletedAfter", required = false) String taskCompletedAfter,@ApiParam(value = "Return only historic task instances that have been completed before this date.") @Valid @RequestParam(value = "taskCompletedBefore", required = false) String taskCompletedBefore,@ApiParam(value = "Return only historic task instances that were created on this date.") @Valid @RequestParam(value = "taskCreatedOn", required = false) String taskCreatedOn,@ApiParam(value = "Return only historic task instances that were created before this date.") @Valid @RequestParam(value = "taskCreatedBefore", required = false) String taskCreatedBefore,@ApiParam(value = "Return only historic task instances that were created after this date.") @Valid @RequestParam(value = "taskCreatedAfter", required = false) String taskCreatedAfter,@ApiParam(value = "An indication if the historic task instance local variables should be returned as well.") @Valid @RequestParam(value = "includeTaskLocalVariables", required = false) Boolean includeTaskLocalVariables,@ApiParam(value = "An indication if the historic task instance global variables should be returned as well.") @Valid @RequestParam(value = "includeProcessVariables", required = false) Boolean includeProcessVariables,@ApiParam(value = "Only return historic task instances with the given tenantId.") @Valid @RequestParam(value = "tenantId", required = false) String tenantId,@ApiParam(value = "Only return historic task instances with a tenantId like the given value.") @Valid @RequestParam(value = "tenantIdLike", required = false) String tenantIdLike,@ApiParam(value = "If true, only returns historic task instances without a tenantId set. If false, the withoutTenantId parameter is ignored.") @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId);


    @ApiOperation(value = "Query for historic activity instances", nickname = "queryActivityInstances", notes = "All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic task instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long.", response = DataResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates request was successful and the activities are returned", response = DataResponse.class),
        @ApiResponse(code = 400, message = "Indicates an parameter was passed in the wrong format. The status-message contains additional information") })
    @RequestMapping(value = "/query/historic-activity-instances",
        produces = "application/json", 
        method = RequestMethod.POST)
    ResponseEntity<DataResponse> queryActivityInstances(@ApiParam(value = ""  )  @Valid @RequestBody HistoricActivityInstanceQueryRequest historicActivityInstanceQueryRequest);


    @ApiOperation(value = "Query for historic details", nickname = "queryHistoricDetail", notes = "All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long.", response = DataResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates request was successful and the historic details are returned", response = DataResponse.class),
        @ApiResponse(code = 400, message = "Indicates an parameter was passed in the wrong format. The status-message contains additional information.") })
    @RequestMapping(value = "/query/historic-detail",
        produces = "application/json", 
        method = RequestMethod.POST)
    ResponseEntity<DataResponse> queryHistoricDetail(@ApiParam(value = ""  )  @Valid @RequestBody HistoricDetailQueryRequest historicDetailQueryRequest);


    @ApiOperation(value = "Query for historic process instances", nickname = "queryHistoricProcessInstance", notes = "All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The variables property is a JSON-array containing objects with the format as described here.", response = DataResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates request was successful and the process instances are returned", response = DataResponse.class),
        @ApiResponse(code = 400, message = "Indicates an parameter was passed in the wrong format. The status-message contains additional information.") })
    @RequestMapping(value = "/query/historic-process-instances",
        produces = "application/json", 
        method = RequestMethod.POST)
    ResponseEntity<DataResponse> queryHistoricProcessInstance(@ApiParam(value = ""  )  @Valid @RequestBody HistoricProcessInstanceQueryRequest historicProcessInstanceQueryRequest);


    @ApiOperation(value = "Query for historic task instances", nickname = "queryHistoricTaskInstance", notes = "All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic task instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The taskVariables and processVariables properties are JSON-arrays containing objects with the format as described here.", response = DataResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates request was successful and the tasks are returned", response = DataResponse.class),
        @ApiResponse(code = 404, message = "Indicates an parameter was passed in the wrong format. The status-message contains additional information.") })
    @RequestMapping(value = "/query/historic-task-instances",
        produces = "application/json", 
        method = RequestMethod.POST)
    ResponseEntity<DataResponse> queryHistoricTaskInstance(@ApiParam(value = ""  )  @Valid @RequestBody HistoricTaskInstanceQueryRequest historicTaskInstanceQueryRequest);


    @ApiOperation(value = "Query for historic variable instances", nickname = "queryVariableInstances", notes = "All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The variables property is a JSON-array containing objects with the format as described here.", response = DataResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates request was successful and the tasks are returned", response = DataResponse.class),
        @ApiResponse(code = 400, message = "Indicates an parameter was passed in the wrong format. The status-message contains additional information.") })
    @RequestMapping(value = "/query/historic-variable-instances",
        produces = "application/json", 
        method = RequestMethod.POST)
    ResponseEntity<DataResponse> queryVariableInstances(@ApiParam(value = ""  )  @Valid @RequestBody HistoricVariableInstanceQueryRequest historicVariableInstanceQueryRequest);

}
