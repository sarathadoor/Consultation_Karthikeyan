/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytatech.ayoos.client.activiti_rest_api.api;

import com.bytatech.ayoos.client.activiti_rest_api.model.DataResponse;
import com.bytatech.ayoos.client.activiti_rest_api.model.ExecutionActionRequest;
import com.bytatech.ayoos.client.activiti_rest_api.model.ExecutionQueryRequest;
import com.bytatech.ayoos.client.activiti_rest_api.model.ExecutionResponse;
import com.bytatech.ayoos.client.activiti_rest_api.model.RestVariable;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-04-16T17:01:52.038+05:30[Asia/Kolkata]")

@Api(value = "Executions", description = "the Executions API")
public interface ExecutionsApi {

    @ApiOperation(value = "Create variables on an execution", nickname = "createExecutionVariable", notes = "", response = Object.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Executions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Object.class),
        @ApiResponse(code = 201, message = "Indicates the execution was found and variable is created/updated."),
        @ApiResponse(code = 400, message = "Indicates the request body is incomplete or contains illegal values. The status description contains additional information about the error."),
        @ApiResponse(code = 404, message = "Indicates the requested execution was not found."),
        @ApiResponse(code = 409, message = "Indicates the execution was found but already contains a variable with the given name. Use the update-method instead.") })
    @RequestMapping(value = "/runtime/executions/{executionId}/variables",
        produces = "application/json", 
        method = RequestMethod.POST)
    ResponseEntity<Object> createExecutionVariable(@ApiParam(value = "The id of the execution to create the new variable for.",required=true) @PathVariable("executionId") String executionId);


    @ApiOperation(value = "Update variables on an execution", nickname = "createOrUpdateExecutionVariable", notes = "", response = Object.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Executions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Object.class),
        @ApiResponse(code = 201, message = "Indicates the execution was found and variable is created/updated."),
        @ApiResponse(code = 400, message = "Indicates the request body is incomplete or contains illegal values. The status description contains additional information about the error."),
        @ApiResponse(code = 404, message = "Indicates the requested execution was not found.") })
    @RequestMapping(value = "/runtime/executions/{executionId}/variables",
        produces = "application/json", 
        method = RequestMethod.PUT)
    ResponseEntity<Object> createOrUpdateExecutionVariable(@ApiParam(value = "The id of the execution to the variables for.",required=true) @PathVariable("executionId") String executionId);


    @ApiOperation(value = "Delete all variables for an execution", nickname = "deleteLocalVariables", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Executions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Indicates the execution was found and variables have been deleted."),
        @ApiResponse(code = 404, message = "Indicates the requested execution was not found.") })
    @RequestMapping(value = "/runtime/executions/{executionId}/variables",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteLocalVariables(@ApiParam(value = "",required=true) @PathVariable("executionId") String executionId);


    @ApiOperation(value = "Delete a variable for an execution", nickname = "deletedExecutionVariable", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Executions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Indicates both the execution and variable were found and variable has been deleted."),
        @ApiResponse(code = 404, message = "Indicates the requested execution was not found or the execution does not have a variable with the given name in the requested scope. Status description contains additional information about the error.") })
    @RequestMapping(value = "/runtime/executions/{executionId}/variables/{variableName}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletedExecutionVariable(@ApiParam(value = "",required=true) @PathVariable("executionId") String executionId,@ApiParam(value = "",required=true) @PathVariable("variableName") String variableName,@ApiParam(value = "") @Valid @RequestParam(value = "scope", required = false) String scope);


    @ApiOperation(value = "Signal event received", nickname = "executeExecutionAction", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Executions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates request was successful and the executions are returned"),
        @ApiResponse(code = 404, message = "Indicates a parameter was passed in the wrong format . The status-message contains additional information.") })
    @RequestMapping(value = "/runtime/executions",
        method = RequestMethod.PUT)
    ResponseEntity<Void> executeExecutionAction(@ApiParam(value = ""  )  @Valid @RequestBody ExecutionActionRequest executionActionRequest);


    @ApiOperation(value = "Get active activities in an execution", nickname = "getActiveActivities", notes = "Returns all activities which are active in the execution and in all child-executions (and their children, recursively), if any.", response = String.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Executions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the execution was found and activities are returned.", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Indicates the execution was not found.") })
    @RequestMapping(value = "/runtime/executions/{executionId}/activities",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<String>> getActiveActivities(@ApiParam(value = "The id of the execution to get activities for.",required=true) @PathVariable("executionId") String executionId);


    @ApiOperation(value = "Get an execution", nickname = "getExecution", notes = "", response = ExecutionResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Executions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the execution was found and returned.", response = ExecutionResponse.class),
        @ApiResponse(code = 404, message = "Indicates the execution was not found.") })
    @RequestMapping(value = "/runtime/executions/{executionId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<ExecutionResponse> getExecution(@ApiParam(value = "The id of the execution to get.",required=true) @PathVariable("executionId") String executionId);


    @ApiOperation(value = "Get a variable for an execution", nickname = "getExecutionVariable", notes = "", response = RestVariable.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Executions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates both the execution and variable were found and variable is returned.", response = RestVariable.class),
        @ApiResponse(code = 400, message = "Indicates the request body is incomplete or contains illegal values. The status description contains additional information about the error."),
        @ApiResponse(code = 404, message = "Indicates the requested execution was not found or the execution does not have a variable with the given name in the requested scope (in case scope-query parameter was omitted, variable doesnï¿½t exist in local and global scope). Status description contains additional information about the error.") })
    @RequestMapping(value = "/runtime/executions/{executionId}/variables/{variableName}",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<RestVariable> getExecutionVariable(@ApiParam(value = "The id of the execution to the variables for.",required=true) @PathVariable("executionId") String executionId,@ApiParam(value = "Name of the variable to get.",required=true) @PathVariable("variableName") String variableName,@ApiParam(value = "Either local or global. If omitted, local variable is returned (if exists). If not, a global variable is returned (if exists).") @Valid @RequestParam(value = "scope", required = false) String scope);


    @ApiOperation(value = "Get the binary data for an execution", nickname = "getExecutionVariableData", notes = "", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Executions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the execution was found and the requested variables are returned.", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Indicates the requested execution was not found or the task doesnï¿½t have a variable with the given name (in the given scope). Status message provides additional information.") })
    @RequestMapping(value = "/runtime/executions/{executionId}/variables/{variableName}/data",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<byte[]>> getExecutionVariableData(@ApiParam(value = "",required=true) @PathVariable("executionId") String executionId,@ApiParam(value = "",required=true) @PathVariable("variableName") String variableName,@ApiParam(value = "") @Valid @RequestParam(value = "scope", required = false) String scope);


    @ApiOperation(value = "List of executions", nickname = "getExecutions", notes = "", response = DataResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Executions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates request was successful and the executions are returned", response = DataResponse.class),
        @ApiResponse(code = 404, message = "Indicates a parameter was passed in the wrong format . The status-message contains additional information.") })
    @RequestMapping(value = "/runtime/executions",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<DataResponse> getExecutions(@ApiParam(value = "Only return models with the given version.") @Valid @RequestParam(value = "id", required = false) String id,@ApiParam(value = "Only return executions with the given activity id.") @Valid @RequestParam(value = "activityId", required = false) String activityId,@ApiParam(value = "Only return process instances with the given process definition key.") @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,@ApiParam(value = "Only return process instances with the given process definition id.") @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,@ApiParam(value = "Only return executions which are part of the process instance with the given id.") @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,@ApiParam(value = "Only return executions which are subscribed to a message with the given name.") @Valid @RequestParam(value = "messageEventSubscriptionName", required = false) String messageEventSubscriptionName,@ApiParam(value = "Only return executions which are subscribed to a signal with the given name.") @Valid @RequestParam(value = "signalEventSubscriptionName", required = false) String signalEventSubscriptionName,@ApiParam(value = "Only return executions which are a direct child of the given execution.") @Valid @RequestParam(value = "parentId", required = false) String parentId,@ApiParam(value = "Only return process instances with the given tenantId.") @Valid @RequestParam(value = "tenantId", required = false) String tenantId,@ApiParam(value = "Only return process instances with a tenantId like the given value.") @Valid @RequestParam(value = "tenantIdLike", required = false) String tenantIdLike,@ApiParam(value = "If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored.") @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,@ApiParam(value = "Property to sort on, to be used together with the order.", allowableValues = "processInstanceId, processDefinitionId, processDefinitionKey, tenantId") @Valid @RequestParam(value = "sort", required = false) String sort);


    @ApiOperation(value = "List of variables for an execution", nickname = "listExecutionVariables", notes = "", response = RestVariable.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Executions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the execution was found and variables are returned.", response = RestVariable.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Indicates the requested execution was not found.") })
    @RequestMapping(value = "/runtime/executions/{executionId}/variables",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<RestVariable>> listExecutionVariables(@ApiParam(value = "The id of the execution to the variables for.",required=true) @PathVariable("executionId") String executionId,@ApiParam(value = "Either local or global. If omitted, both local and global scoped variables are returned.") @Valid @RequestParam(value = "scope", required = false) String scope);


    @ApiOperation(value = "Execute an action on an execution", nickname = "performExecutionAction", notes = "## Request body (signal an execution):   ```JSON {   \"action\":\"signal\" } ```   Both a variables and transientVariables property is accepted with following structure ```JSON {   \"action\":\"signal\",   \"variables\" : [     {       \"name\": \"myVar\",       \"value\": \"someValue\"     }   ] }```   ## Request body (signal event received for execution)   ```JSON {   \"action\":\"signal\" } ```   Notifies the execution that a signal event has been received, requires a signalName parameter. Optional variables can be passed that are set on the execution before the action is executed.## Request body (signal event received for execution)   ```JSON {   \"action\":\"messageEventReceived\",   \"messageName\":\"myMessage\"   \"variables\": [  ] } ```   ", response = ExecutionResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Executions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the execution was found and the action is performed.", response = ExecutionResponse.class),
        @ApiResponse(code = 204, message = "Indicates the execution was found, the action was performed and the action caused the execution to end."),
        @ApiResponse(code = 400, message = "Indicates an illegal action was requested, required parameters are missing in the request body or illegal variables are passed in. Status description contains additional information about the error."),
        @ApiResponse(code = 404, message = "Indicates the execution was not found.") })
    @RequestMapping(value = "/runtime/executions/{executionId}",
        produces = "application/json", 
        method = RequestMethod.PUT)
    ResponseEntity<ExecutionResponse> performExecutionAction(@ApiParam(value = "The id of the execution to execute action on.",required=true) @PathVariable("executionId") String executionId,@ApiParam(value = ""  )  @Valid @RequestBody ExecutionActionRequest executionActionRequest);


    @ApiOperation(value = "Query executions", nickname = "queryExecutions", notes = "The request body can contain all possible filters that can be used in the List executions URL query. On top of these, itï¿½s possible to provide an array of variables and processInstanceVariables to include in the query, with their format described here.  The general paging and sorting query-parameters can be used for this URL.", response = DataResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Executions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates request was successful and the executions are returned.", response = DataResponse.class),
        @ApiResponse(code = 404, message = "Indicates a parameter was passed in the wrong format . The status-message contains additional information.") })
    @RequestMapping(value = "/query/executions",
        produces = "application/json", 
        method = RequestMethod.POST)
    ResponseEntity<DataResponse> queryExecutions(@ApiParam(value = ""  )  @Valid @RequestBody ExecutionQueryRequest executionQueryRequest);


    @ApiOperation(value = "Update a variable on an execution", nickname = "updateExecutionVariable", notes = "", response = RestVariable.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Executions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates both the process instance and variable were found and variable is updated.", response = RestVariable.class),
        @ApiResponse(code = 404, message = "Indicates the requested process instance was not found or the process instance does not have a variable with the given name. Status description contains additional information about the error.") })
    @RequestMapping(value = "/runtime/executions/{executionId}/variables/{variableName}",
        produces = "application/json", 
        method = RequestMethod.PUT)
    ResponseEntity<RestVariable> updateExecutionVariable(@ApiParam(value = "The id of the execution to create the new variable for.",required=true) @PathVariable("executionId") String executionId,@ApiParam(value = "The name of the variable to update.",required=true) @PathVariable("variableName") String variableName);

}
