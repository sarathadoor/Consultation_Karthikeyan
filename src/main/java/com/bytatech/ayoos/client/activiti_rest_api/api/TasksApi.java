/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytatech.ayoos.client.activiti_rest_api.api;

import com.bytatech.ayoos.client.activiti_rest_api.model.AttachmentResponse;
import com.bytatech.ayoos.client.activiti_rest_api.model.CommentRequest;
import com.bytatech.ayoos.client.activiti_rest_api.model.CommentResponse;
import com.bytatech.ayoos.client.activiti_rest_api.model.DataResponse;
import com.bytatech.ayoos.client.activiti_rest_api.model.EventResponse;
import com.bytatech.ayoos.client.activiti_rest_api.model.RestIdentityLink;
import com.bytatech.ayoos.client.activiti_rest_api.model.RestVariable;
import com.bytatech.ayoos.client.activiti_rest_api.model.TaskActionRequest;
import com.bytatech.ayoos.client.activiti_rest_api.model.TaskQueryRequest;
import com.bytatech.ayoos.client.activiti_rest_api.model.TaskRequest;
import com.bytatech.ayoos.client.activiti_rest_api.model.TaskResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-04-16T17:01:52.038+05:30[Asia/Kolkata]")

@Api(value = "Tasks", description = "the Tasks API")
public interface TasksApi {

    @ApiOperation(value = "Create a new attachment on a task, containing a link to an external resource or an attached file", nickname = "createAttachment", notes = "## Create a new attachment on a task, containing a link to an external resource   ```JSON {   \"name\":\"Simple attachment\",   \"description\":\"Simple attachment description\",   \"type\":\"simpleType\",   \"externalUrl\":\"http://activiti.org\" } ```   Only the attachment name is required to create a new attachment.    ## Create a new attachment on a task, with an attached file  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  - *description*: Description of the attachment, optional.  - *type*: Type of attachment, optional. Supports any arbitrary string or a valid HTTP content-type.", response = AttachmentResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AttachmentResponse.class),
        @ApiResponse(code = 201, message = "Indicates the attachment was created and the result is returned."),
        @ApiResponse(code = 400, message = "Indicates the attachment name is missing from the request."),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/attachments",
        produces = "application/json", 
        method = RequestMethod.POST)
    ResponseEntity<AttachmentResponse> createAttachment(@ApiParam(value = "The id of the task to create the attachment for.",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Create Task", nickname = "createTask", notes = "", response = TaskResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = TaskResponse.class),
        @ApiResponse(code = 201, message = "Indicates request was successful and the tasks are returned"),
        @ApiResponse(code = 400, message = "Indicates a parameter was passed in the wrong format or that delegationState has an invalid value (other than pending and resolved). The status-message contains additional information.") })
    @RequestMapping(value = "/runtime/tasks",
        produces = "application/json", 
        method = RequestMethod.POST)
    ResponseEntity<TaskResponse> createTask(@ApiParam(value = ""  )  @Valid @RequestBody TaskRequest taskRequest);


    @ApiOperation(value = "Create a new comment on a task", nickname = "createTaskComments", notes = "", response = CommentResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CommentResponse.class),
        @ApiResponse(code = 201, message = "Indicates the comment was created and the result is returned."),
        @ApiResponse(code = 400, message = "Indicates the comment is missing from the request."),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/comments",
        produces = "application/json", 
        method = RequestMethod.POST)
    ResponseEntity<CommentResponse> createTaskComments(@ApiParam(value = "The id of the task to create the comment for.",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = ""  )  @Valid @RequestBody CommentRequest commentRequest);


    @ApiOperation(value = "Create an identity link on a task", nickname = "createTaskInstanceIdentityLinks", notes = "## Request body (user)   ```JSON {   \"userId\" : \"kermit\",   \"type\" : \"candidate\", } ```   ## Request body (group)   ```JSON {   \"groupId\" : \"sales\",   \"type\" : \"candidate\", } ```   ", response = RestIdentityLink.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = RestIdentityLink.class),
        @ApiResponse(code = 201, message = "Indicates the task was found and the identity link was created."),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found or the task doesnï¿½t have the requested identityLink. The status contains additional information about this error.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/identitylinks",
        produces = "application/json", 
        method = RequestMethod.POST)
    ResponseEntity<RestIdentityLink> createTaskInstanceIdentityLinks(@ApiParam(value = "The id of the task .",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = ""  )  @Valid @RequestBody RestIdentityLink restIdentityLink);


    @ApiOperation(value = "Create new variables on a task", nickname = "createTaskVariable", notes = "## Request body for creating simple (non-binary) variables   ```JSON [   {     \"name\" : \"myTaskVariable\",     \"scope\" : \"local\",     \"type\" : \"string\",     \"value\" : \"Hello my friend\"   },   {    } ] ```   The request body should be an array containing one or more JSON-objects representing the variables that should be created.  - *name*: Required name of the variable  scope: Scope of variable that is created. If omitted, local is assumed.  - *type*: Type of variable that is created. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).  - *value*: Variable value.  More information about the variable format can be found in the REST variables section.   ## Request body for Creating a new binary variable  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  scope: Scope of variable that is created. If omitted, local is assumed.  - *type*: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.   ", response = Object.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Object.class),
        @ApiResponse(code = 201, message = "Indicates the variables were created and the result is returned."),
        @ApiResponse(code = 400, message = "Indicates the name of a variable to create was missing or that an attempt is done to create a variable on a standalone task (without a process associated) with scope global or an empty array of variables was included in the request or request did not contain an array of variables. Status message provides additional information."),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found."),
        @ApiResponse(code = 409, message = "Indicates the task already has a variable with the given name. Use the PUT method to update the task variable instead."),
        @ApiResponse(code = 415, message = "Indicates the serializable data contains an object for which no class is present in the JVM running the Activiti engine and therefore cannot be deserialized.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/variables",
        produces = "application/json", 
        method = RequestMethod.POST)
    ResponseEntity<Object> createTaskVariable(@ApiParam(value = "The id of the task to create the new variable for.",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Delete all local variables on a task", nickname = "deleteAllLocalTaskVariables", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Indicates all local task variables have been deleted. Response-body is intentionally empty."),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/variables",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAllLocalTaskVariables(@ApiParam(value = "The id of the task the variable to delete belongs to.",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Delete an attachment on a task", nickname = "deleteAttachment", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Indicates the task and attachment were found and the attachment is deleted. Response body is left empty intentionally."),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found or the tasks doesnï¿½t have a attachment with the given ID.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/attachments/{attachmentId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAttachment(@ApiParam(value = "The id of the task to delete the attachment for.",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "The id of the attachment.",required=true) @PathVariable("attachmentId") String attachmentId);


    @ApiOperation(value = "Delete an event on a task", nickname = "deleteEvent", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Indicates the task was found and the events are returned."),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found or the task doesnï¿½t have the requested event.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/events/{eventId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteEvent(@ApiParam(value = "",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "",required=true) @PathVariable("eventId") String eventId);


    @ApiOperation(value = "Delete a task", nickname = "deleteTask", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Indicates the task was found and has been deleted. Response-body is intentionally empty."),
        @ApiResponse(code = 403, message = "Indicates the requested task cannot be deleted because itï¿½s part of a workflow."),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTask(@ApiParam(value = "The id of the task to delete.",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Delete a comment on a task", nickname = "deleteTaskComment", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Indicates the task and comment were found and the comment is deleted. Response body is left empty intentionally."),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found or the tasks doesnï¿½t have a comment with the given ID.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/comments/{commentId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTaskComment(@ApiParam(value = "The id of the task to delete the comment for.",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "The id of the comment.",required=true) @PathVariable("commentId") String commentId);


    @ApiOperation(value = "Delete an identity link on a task", nickname = "deleteTaskInstanceIdentityLinks", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Indicates the task and identity link were found and the link has been deleted. Response-body is intentionally empty."),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found or the task doesnï¿½t have the requested identityLink. The status contains additional information about this error.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTaskInstanceIdentityLinks(@ApiParam(value = "The id of the task.",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "Either groups or users, depending on what kind of identity is targeted.",required=true) @PathVariable("family") String family,@ApiParam(value = "The id of the identity.",required=true) @PathVariable("identityId") String identityId,@ApiParam(value = "The type of identity link.",required=true) @PathVariable("type") String type);


    @ApiOperation(value = "Delete a variable on a task", nickname = "deleteTaskInstanceVariable", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Indicates the task variable was found and has been deleted. Response-body is intentionally empty."),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found or the task doesnï¿½t have a variable with the given name. Status message contains additional information about the error.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/variables/{variableName}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTaskInstanceVariable(@ApiParam(value = "The id of the task the variable to delete belongs to.",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "The name of the variable to delete.",required=true) @PathVariable("variableName") String variableName);


    @ApiOperation(value = "Tasks actions", nickname = "executeTaskAction", notes = "## Complete a task - Request Body   ```JSON {   \"action\" : \"complete\",   \"variables\" : [] } ```Completes the task. Optional variable array can be passed in using the variables property. More information about the variable format can be found in the REST variables section. Note that the variable-scope that is supplied is ignored and the variables are set on the parent-scope unless a variable exists in a local scope, which is overridden in this case. This is the same behavior as the TaskService.completeTask(taskId, variables) invocation.  Note that also a transientVariables property is accepted as part of this json, that follows the same structure as the variables property.   ## Claim a task - Request Body    ```JSON {   \"action\" : \"claim\",   \"assignee\" : \"userWhoClaims\" } ```   Claims the task by the given assignee. If the assignee is null, the task is assigned to no-one, claimable again.   ## Delegate a task - Request Body    ```JSON {   \"action\" : \"delegate\",   \"assignee\" : \"userToDelegateTo\" } ```   Delegates the task to the given assignee. The assignee is required.   ## Suspend a process instance   ```JSON {   \"action\" : \"resolve\" } ```   Resolves the task delegation. The task is assigned back to the task owner (if any).", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the action was executed."),
        @ApiResponse(code = 400, message = "When the body contains an invalid value or when the assignee is missing when the action requires it."),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found."),
        @ApiResponse(code = 409, message = "Indicates the action cannot be performed due to a conflict. Either the task was updates simultaneously or the task was claimed by another user, in case of the claim action.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}",
        method = RequestMethod.POST)
    ResponseEntity<Void> executeTaskAction(@ApiParam(value = "",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = ""  )  @Valid @RequestBody TaskActionRequest taskActionRequest);


    @ApiOperation(value = "Get the binary data for a variable", nickname = "geTaskVariableData", notes = "The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the task was found and the requested variables are returned.", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found or the task doesnï¿½t have a variable with the given name (in the given scope). Status message provides additional information.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/variables/{variableName}/data",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<byte[]>> geTaskVariableData(@ApiParam(value = "The id of the task to get a variable data for.",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "The name of the variable to get data for. Only variables of type binary and serializable can be used. If any other type of variable is used, a 404 is returned.",required=true) @PathVariable("variableName") String variableName);


    @ApiOperation(value = "Get an attachment on a task", nickname = "getAttachment", notes = "", response = AttachmentResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the task and attachment were found and the attachment is returned.", response = AttachmentResponse.class),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found or the tasks doesnï¿½t have a attachment with the given ID.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/attachments/{attachmentId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<AttachmentResponse> getAttachment(@ApiParam(value = "The id of the task to get the attachment for.",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "The id of the attachment.",required=true) @PathVariable("attachmentId") String attachmentId);


    @ApiOperation(value = "Get the content for an attachment", nickname = "getAttachmentContent", notes = "The response body contains the binary content. By default, the content-type of the response is set to application/octet-stream unless the attachment type contains a valid Content-type.", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the task and attachment was found and the requested content is returned.", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found or the task doesnï¿½t have an attachment with the given id or the attachment doesnï¿½t have a binary stream available. Status message provides additional information.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/attachments/{attachmentId}/content",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<byte[]>> getAttachmentContent(@ApiParam(value = "The id of the task to get a variable data for.",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "The id of the attachment, a 404 is returned when the attachment points to an external URL rather than content attached in Activiti.",required=true) @PathVariable("attachmentId") String attachmentId);


    @ApiOperation(value = "Get all attachments on a task", nickname = "getAttachments", notes = "", response = AttachmentResponse.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the task was found and the attachments are returned.", response = AttachmentResponse.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/attachments",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<AttachmentResponse>> getAttachments(@ApiParam(value = "The id of the task to get the attachments for.",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Get an event on a task", nickname = "getEvent", notes = "", response = EventResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the task and event were found and the event is returned.", response = EventResponse.class),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found or the tasks doesnï¿½t have an event with the given ID.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/events/{eventId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<EventResponse> getEvent(@ApiParam(value = "The id of the task to get the event for.",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "The id of the event.",required=true) @PathVariable("eventId") String eventId);


    @ApiOperation(value = "Get all events for a task", nickname = "getEvents", notes = "", response = EventResponse.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the task was found and the events are returned.", response = EventResponse.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/events",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<EventResponse>> getEvents(@ApiParam(value = "The id of the task to get the events for.",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Get all identitylinks for a task for either groups or users", nickname = "getIdentityLinksForFamily", notes = "## Get all identitylinks for a task URL   ```  GET runtime/tasks/{taskId}/identitylinks/users GET runtime/tasks/{taskId}/identitylinks/groups  ```   Returns only identity links targetting either users or groups. Response body and status-codes are exactly the same as when getting the full list of identity links for a task.", response = RestIdentityLink.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the task was found and the requested identity links are returned.", response = RestIdentityLink.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/identitylinks/{family}",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<RestIdentityLink>> getIdentityLinksForFamily(@ApiParam(value = "",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "",required=true) @PathVariable("family") String family);


    @ApiOperation(value = "Query for tasks", nickname = "getQueryResult", notes = "All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of tasks (except for candidateGroupIn which is only available in this POST task query REST service), but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uriï¿½s that are too long. On top of that, the query allows for filtering based on task and process variables. The taskVariables and processInstanceVariables are both JSON-arrays containing objects with the format as described here.", response = DataResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates request was successful and the tasks are returned.", response = DataResponse.class),
        @ApiResponse(code = 400, message = "Indicates a parameter was passed in the wrong format or that delegationState has an invalid value (other than pending and resolved). The status-message contains additional information.") })
    @RequestMapping(value = "/query/tasks",
        produces = "application/json", 
        method = RequestMethod.POST)
    ResponseEntity<DataResponse> getQueryResult(@ApiParam(value = ""  )  @Valid @RequestBody TaskQueryRequest taskQueryRequest);


    @ApiOperation(value = "Get list of sub tasks for a task", nickname = "getSubTasks", notes = "", response = TaskResponse.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates request was successful and the  sub tasks are returned", response = TaskResponse.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/subtasks",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<TaskResponse>> getSubTasks(@ApiParam(value = "",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Get a task", nickname = "getTask", notes = "", response = TaskResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the task was found and returned.", response = TaskResponse.class),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<TaskResponse> getTask(@ApiParam(value = "The id of the task to get.",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = " Get a comment on a task", nickname = "getTaskComment", notes = "", response = CommentResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the task and comment were found and the comment is returned.", response = CommentResponse.class),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found or the tasks doesnï¿½t have a comment with the given ID.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/comments/{commentId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<CommentResponse> getTaskComment(@ApiParam(value = "The id of the task to get the comment for.",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "The id of the comment.",required=true) @PathVariable("commentId") String commentId);


    @ApiOperation(value = "Get a single identity link on a task", nickname = "getTaskInstanceIdentityLinks", notes = "", response = RestIdentityLink.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the task and identity link was found and returned.", response = RestIdentityLink.class),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found or the task doesnï¿½t have the requested identityLink. The status contains additional information about this error.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<RestIdentityLink> getTaskInstanceIdentityLinks(@ApiParam(value = "The id of the task .",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "Either groups or users, depending on what kind of identity is targeted.",required=true) @PathVariable("family") String family,@ApiParam(value = "The id of the identity.",required=true) @PathVariable("identityId") String identityId,@ApiParam(value = "The type of identity link.",required=true) @PathVariable("type") String type);


    @ApiOperation(value = "Get a variable from a task", nickname = "getTaskInstanceVariable", notes = "", response = RestVariable.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the task was found and the requested variables are returned.", response = RestVariable.class),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found or the task doesnï¿½t have a variable with the given name (in the given scope). Status message provides additional information.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/variables/{variableName}",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<RestVariable> getTaskInstanceVariable(@ApiParam(value = "The id of the task to get a variable for.",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "The name of the variable to get.",required=true) @PathVariable("variableName") String variableName,@ApiParam(value = "Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the taskï¿½s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.") @Valid @RequestParam(value = "scope", required = false) String scope);


    @ApiOperation(value = "List of tasks", nickname = "getTasks", notes = "", response = DataResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates request was successful and the tasks are returned", response = DataResponse.class),
        @ApiResponse(code = 404, message = "Indicates a parameter was passed in the wrong format or that delegationState has an invalid value (other than pending and resolved). The status-message contains additional information.") })
    @RequestMapping(value = "/runtime/tasks",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<DataResponse> getTasks(@ApiParam(value = "Only return models with the given version.") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "Only return tasks with a name like the given name.") @Valid @RequestParam(value = "nameLike", required = false) String nameLike,@ApiParam(value = "Only return tasks with the given description.") @Valid @RequestParam(value = "description", required = false) String description,@ApiParam(value = "Only return tasks with the given priority.") @Valid @RequestParam(value = "priority", required = false) String priority,@ApiParam(value = "Only return tasks with a priority greater than the given value.") @Valid @RequestParam(value = "minimumPriority", required = false) String minimumPriority,@ApiParam(value = "Only return tasks with a priority lower than the given value.") @Valid @RequestParam(value = "maximumPriority", required = false) String maximumPriority,@ApiParam(value = "Only return tasks assigned to the given user.") @Valid @RequestParam(value = "assignee", required = false) String assignee,@ApiParam(value = "Only return tasks assigned with an assignee like the given value.") @Valid @RequestParam(value = "assigneeLike", required = false) String assigneeLike,@ApiParam(value = "Only return tasks owned by the given user.") @Valid @RequestParam(value = "owner", required = false) String owner,@ApiParam(value = "Only return tasks assigned with an owner like the given value.") @Valid @RequestParam(value = "ownerLike", required = false) String ownerLike,@ApiParam(value = "Only return tasks that are not assigned to anyone. If false is passed, the value is ignored.") @Valid @RequestParam(value = "unassigned", required = false) String unassigned,@ApiParam(value = "Only return tasks that have the given delegation state. Possible values are pending and resolved.") @Valid @RequestParam(value = "delegationState", required = false) String delegationState,@ApiParam(value = "Only return tasks that can be claimed by the given user. This includes both tasks where the user is an explicit candidate for and task that are claimable by a group that the user is a member of.") @Valid @RequestParam(value = "candidateUser", required = false) String candidateUser,@ApiParam(value = "Only return tasks that can be claimed by a user in the given group.") @Valid @RequestParam(value = "candidateGroup", required = false) String candidateGroup,@ApiParam(value = "Only return tasks that can be claimed by a user in the given groups. Values split by comma.") @Valid @RequestParam(value = "candidateGroups", required = false) String candidateGroups,@ApiParam(value = "Only return tasks in which the given user is involved.") @Valid @RequestParam(value = "involvedUser", required = false) String involvedUser,@ApiParam(value = "Only return tasks with the given task definition id.") @Valid @RequestParam(value = "taskDefinitionKey", required = false) String taskDefinitionKey,@ApiParam(value = "Only return tasks with a given task definition id like the given value.") @Valid @RequestParam(value = "taskDefinitionKeyLike", required = false) String taskDefinitionKeyLike,@ApiParam(value = "Only return tasks which are part of the process instance with the given id.") @Valid @RequestParam(value = "processInstanceId", required = false) String processInstanceId,@ApiParam(value = "Only return tasks which are part of the process instance with the given business key.") @Valid @RequestParam(value = "processInstanceBusinessKey", required = false) String processInstanceBusinessKey,@ApiParam(value = "Only return tasks which are part of the process instance which has a business key like the given value.") @Valid @RequestParam(value = "processInstanceBusinessKeyLike", required = false) String processInstanceBusinessKeyLike,@ApiParam(value = "Only return tasks which are part of a process instance which has a process definition with the given id.") @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId,@ApiParam(value = "Only return tasks which are part of a process instance which has a process definition with the given key.") @Valid @RequestParam(value = "processDefinitionKey", required = false) String processDefinitionKey,@ApiParam(value = "Only return tasks which are part of a process instance which has a process definition with a key like the given value.") @Valid @RequestParam(value = "processDefinitionKeyLike", required = false) String processDefinitionKeyLike,@ApiParam(value = "Only return tasks which are part of a process instance which has a process definition with the given name.") @Valid @RequestParam(value = "processDefinitionName", required = false) String processDefinitionName,@ApiParam(value = "Only return tasks which are part of a process instance which has a process definition with a name like the given value.") @Valid @RequestParam(value = "processDefinitionNameLike", required = false) String processDefinitionNameLike,@ApiParam(value = "Only return tasks which are part of the execution with the given id.") @Valid @RequestParam(value = "executionId", required = false) String executionId,@ApiParam(value = "Only return tasks which are created on the given date.") @Valid @RequestParam(value = "createdOn", required = false) String createdOn,@ApiParam(value = "Only return tasks which are created before the given date.") @Valid @RequestParam(value = "createdBefore", required = false) String createdBefore,@ApiParam(value = "Only return tasks which are created after the given date.") @Valid @RequestParam(value = "createdAfter", required = false) String createdAfter,@ApiParam(value = "Only return tasks which are due on the given date.") @Valid @RequestParam(value = "dueOn", required = false) String dueOn,@ApiParam(value = "Only return tasks which are due before the given date.") @Valid @RequestParam(value = "dueBefore", required = false) String dueBefore,@ApiParam(value = "Only return tasks which are due after the given date.") @Valid @RequestParam(value = "dueAfter", required = false) String dueAfter,@ApiParam(value = "Only return tasks which donï¿½t have a due date. The property is ignored if the value is false.") @Valid @RequestParam(value = "withoutDueDate", required = false) Boolean withoutDueDate,@ApiParam(value = "Only return tasks that are not a subtask of another task.") @Valid @RequestParam(value = "excludeSubTasks", required = false) Boolean excludeSubTasks,@ApiParam(value = "If true, only return tasks that are not suspended (either part of a process that is not suspended or not part of a process at all). If false, only tasks that are part of suspended process instances are returned.") @Valid @RequestParam(value = "active", required = false) Boolean active,@ApiParam(value = "Indication to include task local variables in the result.") @Valid @RequestParam(value = "includeTaskLocalVariables", required = false) Boolean includeTaskLocalVariables,@ApiParam(value = "Indication to include process variables in the result.") @Valid @RequestParam(value = "includeProcessVariables", required = false) Boolean includeProcessVariables,@ApiParam(value = "Only return tasks with the given tenantId.") @Valid @RequestParam(value = "tenantId", required = false) String tenantId,@ApiParam(value = "Only return tasks with a tenantId like the given value.") @Valid @RequestParam(value = "tenantIdLike", required = false) String tenantIdLike,@ApiParam(value = "If true, only returns tasks without a tenantId set. If false, the withoutTenantId parameter is ignored.") @Valid @RequestParam(value = "withoutTenantId", required = false) Boolean withoutTenantId,@ApiParam(value = "Select tasks that has been claimed or assigned to user or waiting to claim by user (candidate user or groups).") @Valid @RequestParam(value = "candidateOrAssigned", required = false) String candidateOrAssigned,@ApiParam(value = "Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml). ") @Valid @RequestParam(value = "category", required = false) String category);


    @ApiOperation(value = "Get all comments on a task", nickname = "listTaskComments", notes = "", response = CommentResponse.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CommentResponse.class, responseContainer = "List"),
        @ApiResponse(code = 201, message = "Indicates the task was found and the comments are returned."),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/comments",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<CommentResponse>> listTaskComments(@ApiParam(value = "The id of the task to get the comments for.",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Get all variables for a task", nickname = "listTaskVariables", notes = "", response = RestVariable.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the task was found and the requested variables are returned", response = RestVariable.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found..") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/variables",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<RestVariable>> listTaskVariables(@ApiParam(value = "The id of the task to get variables for.",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Get all identity links for a task", nickname = "listTasksInstanceIdentityLinks", notes = "", response = RestIdentityLink.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the task was found and the requested identity links are returned.", response = RestIdentityLink.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/identitylinks",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<RestIdentityLink>> listTasksInstanceIdentityLinks(@ApiParam(value = "The id of the task to get the identity links for.",required=true) @PathVariable("taskId") String taskId);


    @ApiOperation(value = "Update a task", nickname = "updateTask", notes = "All request values are optional. For example, you can only include the assignee attribute in the request body JSON-object, only updating the assignee of the task, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the task-value will be updated to null. Example: {\"dueDate\" : null} will clear the duedate of the task).", response = TaskResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the task was updated.", response = TaskResponse.class),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found."),
        @ApiResponse(code = 409, message = "Indicates the requested task was updated simultaneously.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}",
        produces = "application/json", 
        method = RequestMethod.PUT)
    ResponseEntity<TaskResponse> updateTask(@ApiParam(value = "",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = ""  )  @Valid @RequestBody TaskRequest taskRequest);


    @ApiOperation(value = "Update an existing variable on a task", nickname = "updateTaskInstanceVariable", notes = "## Request body for updating simple (non-binary) variables   ```JSON {   \"name\" : \"myTaskVariable\",   \"scope\" : \"local\",   \"type\" : \"string\",   \"value\" : \"Hello my friend\" } ```   - *name*: Required name of the variable  - *scope*: Scope of variable that is updated. If omitted, local is assumed.  - *type*: Type of variable that is updated. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).  - *value*: Variable value.   ## Request body for updating simple (non-binary) variables  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  - *scope*: Scope of variable that is updated. If omitted, local is assumed.  - *type*: Type of variable that is updated. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.", response = RestVariable.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates the variables was updated and the result is returned.", response = RestVariable.class),
        @ApiResponse(code = 400, message = "Indicates the name of a variable to update was missing or that an attempt is done to update a variable on a standalone task (without a process associated) with scope global. Status message provides additional information."),
        @ApiResponse(code = 404, message = "Indicates the requested task was not found or the task doesnï¿½t have a variable with the given name in the given scope. Status message contains additional information about the error."),
        @ApiResponse(code = 415, message = "Indicates the serializable data contains an object for which no class is present in the JVM running the Activiti engine and therefore cannot be deserialized.") })
    @RequestMapping(value = "/runtime/tasks/{taskId}/variables/{variableName}",
        produces = "application/json", 
        method = RequestMethod.PUT)
    ResponseEntity<RestVariable> updateTaskInstanceVariable(@ApiParam(value = "The id of the task to update the variable for.",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "The name of the variable to update.",required=true) @PathVariable("variableName") String variableName);

}
