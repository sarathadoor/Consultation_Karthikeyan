/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytatech.ayoos.client.activiti_rest_api.api;

import com.bytatech.ayoos.client.activiti_rest_api.model.FormDataResponse;
import com.bytatech.ayoos.client.activiti_rest_api.model.ProcessInstanceResponse;
import com.bytatech.ayoos.client.activiti_rest_api.model.SubmitFormRequest;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-04-16T17:01:52.038+05:30[Asia/Kolkata]")

@Api(value = "Forms", description = "the Forms API")
public interface FormsApi {

    @ApiOperation(value = "Get form data", nickname = "getFormData", notes = "", response = FormDataResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Forms", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates that form data could be queried.", response = FormDataResponse.class),
        @ApiResponse(code = 404, message = "Indicates that form data could not be found.") })
    @RequestMapping(value = "/form/form-data",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<FormDataResponse> getFormData(@ApiParam(value = "The task id corresponding to the form data that needs to be retrieved.") @Valid @RequestParam(value = "taskId", required = false) String taskId,@ApiParam(value = "The process definition id corresponding to the start event form data that needs to be retrieved.") @Valid @RequestParam(value = "processDefinitionId", required = false) String processDefinitionId);


    @ApiOperation(value = "Submit task form data", nickname = "submitForm", notes = "", response = ProcessInstanceResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Forms", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates request was successful and the form data was submitted", response = ProcessInstanceResponse.class),
        @ApiResponse(code = 400, message = "Indicates an parameter was passed in the wrong format. The status-message contains additional information.") })
    @RequestMapping(value = "/form/form-data",
        produces = "application/json", 
        method = RequestMethod.POST)
    ResponseEntity<ProcessInstanceResponse> submitForm(@ApiParam(value = ""  )  @Valid @RequestBody SubmitFormRequest submitFormRequest);

}
